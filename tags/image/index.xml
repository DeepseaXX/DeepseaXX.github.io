<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Image on DeepseaXX's Blog</title><link>https://deepseaxx.com/tags/image/</link><description>Recent content in Image on DeepseaXX's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 01 Mar 2024 11:00:00 +0900</lastBuildDate><atom:link href="https://deepseaxx.com/tags/image/index.xml" rel="self" type="application/rss+xml"/><item><title>关于研究如何用 Python 判断他是个红色</title><link>https://deepseaxx.com/p/20240301-isred/</link><pubDate>Fri, 01 Mar 2024 11:00:00 +0900</pubDate><guid>https://deepseaxx.com/p/20240301-isred/</guid><description>&lt;h2 id="背景">背景
&lt;/h2>&lt;p>在这之前，遇到的是一个处理奇形怪状的 Excel，并把结果以整理后的格式输出的问题。使用 Python 的 openpyxl，和 Python 那个基本不用过脑子的语法，（但强忍着对游标卡尺的恶心）走迷宫一样探索完了那个奇形怪状的表格。到这为止，基本都靠 ChatGPT 和 bing 搜索（别问为什么不用谷歌，凑积分罢了）就能解决问题。&lt;/p>
&lt;p>然后就遇到了究极坑点。Excel 表格的上游，是通过单元格的背景颜色填充，来做一个维度的区分的……&lt;/p>
&lt;p>而且这个上游部门，经常做一些突然就变了的事情，没有提前通知和商量其他部门的交接，就变了，给别的部门本来的工作方法带来了巨大的冲击。很多对接用的系统，都是已经异动到其他部门的前辈用你不熟悉的语言（VBA）写的，可维护性基本等于零。而且不去主动问，基本不会主动给你提供详细的情报，只能去猜。&lt;/p>
&lt;h2 id="红色">红色
&lt;/h2>&lt;p>总之经历过了上述问题，答案最终变成了如何识别红色。&lt;/p>
&lt;p>当然标准的红色 rgb(255,0,0)已经是一个==就能判断的程度了。问题就是上游部门的任性程度，会不会在未来的某一天，突然决定用深红和浅红来再做进一步区分呢。&lt;/p>
&lt;p>rgb 值虽然简单易懂，但是红绿蓝三个数字的单纯组合，对我这种色彩感知仅有平均普通人水平的人来说，其实非常难以理解。我曾经想少点处理，直接用 R 和 G、B 的差值，R 和 GB 平均值的差值，G 和 B 的差值来粗暴判断，但是！RGB 的增减不是线性变化（或者说不够均匀？），想尽可能判断更多细枝末节（比如 R 值偏低的时候，和 GB 之间的差值也要变化），表达式越来越迷乱，我在 and 和 or 的泥沼中爬向了据说更加现代直观的 hsv 色彩空间。&lt;/p>
&lt;h2 id="色彩空间的转换">色彩空间的转换
&lt;/h2>&lt;p>用现成的库肯定是最好的嘛。我选择了 python 标准的 colorsys。&lt;/p>
&lt;p>首先 colorsys 除了某一个（忘记哪个了，反正我没用到）之外，取值的范围都在[0,1]之间，所以相应的，以 0 到 255 为取值范围的 rgb，或者写成 16 进制格式的 rgb，或者 hsv 等 h 值在 0 到 360 之间的，都需要做一步除法，来转换成 colorsys 所认同的格式。反之转换后的结果，也需要乘法来复原。&lt;/p>
&lt;p>其次，通过 openpyxl 读取来的 Excel 单元格色彩值，是四位的 0 到 255 之间的值。例如 rgb(255,0,0)，直接读取出来是“FFFF0000”其中第一位的 FF，我也不知道是啥，大概是透明度之类的玩意，总之暂时用不太到。想要用 colorsys 做下一步处理，就得把这字符串的 RGB 的部分先取出来，再进行进制转化。&lt;/p>
&lt;h2 id="hsv">hsv
&lt;/h2>&lt;p>哈哈，hsv，色相饱和度明度。确实很直观。本来以为只要判断 h 的范围就够了，然后发现在明度高，或饱和度低的时候，颜色会趋近于黑灰白，不过这总比 rgb 简略多了。最后我写的判断式是&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">return (hsv[0] &amp;lt;= 14/360 or 343/360 &amp;lt;= hsv[0]) and (hsv[1] &amp;gt; 0.33) and (hsv[2] &amp;gt; 0.5) and hsv[1]*hsv[2] &amp;gt; 0.36
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>hsv[0]&lt;/code>，也就是 h，在更广泛的领域里是 0-360 的范围里取值。在 Python 的 colorsys 里面，只有[0,1]的范围。那就简单变换。&lt;/p>
&lt;p>其他就很简单了，s 和 v 单独不低于阈值，且乘积不低于阈值。基本可以覆盖对于单独一个 h 值下的情况了。&lt;/p>
&lt;p>最后为了直观，把遍历 hsv 色彩空间之后，根据我的函数判断是否为 red 的结果，直接输出在 Excel 里面。有兴趣的可以自己试试看。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">from openpyxl import Workbook
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">from openpyxl.styles import PatternFill
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">from colorsys import rgb_to_hsv, hsv_to_rgb
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">def decimal_to_hex_string(decimal_value):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> decimal_value %= 256
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> hex_value = hex(decimal_value)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> hex_string = str(hex_value)[2:].zfill(2)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return hex_string
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">def hex_string_to_decimal(hex_string):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> decimal_value = int(hex_string, 16)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return decimal_value
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">def is_rgb_string_red(rgb_string):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # solid: rgb_string[0:2]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if len(rgb_string) == 6:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> rgb_string = &amp;#34;ff&amp;#34;+rgb_string
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> red = hex_string_to_decimal(rgb_string[2:4])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> green = hex_string_to_decimal(rgb_string[4:6])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> blue = hex_string_to_decimal(rgb_string[6:8])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> hsv = rgb_to_hsv(red/256, green/256, blue/256)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # print(hsv[0], hsv[1], hsv[2])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return (hsv[0] &amp;lt;= 14/360 or 343/360 &amp;lt;= hsv[0]) and (hsv[1] &amp;gt; 0.33) and (hsv[2] &amp;gt; 0.5) and hsv[1]*hsv[2] &amp;gt; 0.36
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># color判断結果表作成
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">wb = Workbook()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ws = wb.active
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># カウント
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">i = 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">for h in range(0, 100, 1):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> h = (h+90) % 100
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> for s in range(30, 100, 5):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> for v in range(30, 100, 5):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # 一行の列数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> width = int((100-30)/5)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # hsvからrgbフォーマットに変換
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # colorsysの範囲は0~1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> rgb = hsv_to_rgb(h/100, s/100, v/100)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> rgb_string = decimal_to_hex_string(int(rgb[0]*256)) + decimal_to_hex_string(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int(rgb[1]*256))+decimal_to_hex_string(int(rgb[2]*256))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ws.cell(row=int(i/width)+1, column=i %
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> width+1).fill = PatternFill(&amp;#34;solid&amp;#34;, fgColor=rgb_string)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> result = is_rgb_string_red(rgb_string)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if result:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ws.cell(row=int(i/width)+1, column=i %
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> width+1).value = str(result)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> i += 1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">wb.close()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">wb.save(&amp;#39;info/color.xlsx&amp;#39;)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>iOS 上个人比较常用的修图改图作图 APP</title><link>https://deepseaxx.com/p/20240212-ios-images/</link><pubDate>Mon, 12 Feb 2024 17:00:00 +0900</pubDate><guid>https://deepseaxx.com/p/20240212-ios-images/</guid><description>&lt;h2 id="写在前面">写在前面
&lt;/h2>&lt;p>我个人对于 iOS APP 的态度是，好用、价格合适（指相对功能的复杂程度来讲）、支持买断就买断，订阅制基本直接 pass。&lt;/p>
&lt;p>也是这个原因，很多日常整活都依靠这些买断的 APP，导致我很难无痛转生到 Android 系统上。&lt;/p>
&lt;h2 id="介绍">介绍
&lt;/h2>&lt;h3 id="phonto">&lt;strong>Phonto&lt;/strong>
&lt;/h3>&lt;p>用来在图片上添加文字，免费有广告，可内购去广告，但是一般广告会出现在修完一张图之后，只修一张的时候感知为 0，所以不需要特意去广告。&lt;/p>
&lt;h3 id="sketchbook">&lt;strong>Sketchbook&lt;/strong>
&lt;/h3>&lt;p>更类似 Photoshop 的逻辑，支持抠图滤镜变换加字加图，支持多图层。&lt;/p>
&lt;p>涂鸦功能更加类似于画笔，有铅笔钢笔毛笔水彩油画笔等多种效果，并且自定义空间非常大。但缺少一个简单粗暴的涂鸦预设。&lt;/p>
&lt;p>本人从刚接触就买断了高级版，使用至今，APP 仍在不断优化 UI 布局。&lt;/p>
&lt;h3 id="天天-p-图">&lt;strong>天天 P 图&lt;/strong>
&lt;/h3>&lt;p>不多说了，我用这玩意更多是用来恶搞，比如用大眼特效 P 鬼图。&lt;/p>
&lt;h3 id="长图拼接大师">&lt;strong>长图拼接大师&lt;/strong>
&lt;/h3>&lt;p>iOS 至今仍然缺少的长图功能。之前一直用的某软件突然之间从 App Store 消失了。试用了一圈之后这个逻辑稍微正常一点。依然是高级版买断去广告。&lt;/p>
&lt;p>最大的问题是，本身菜单已经区分了“普通拼接”和“智能拼接”，你为什么还要在我选择了其中之一之后再问一遍？&lt;/p>
&lt;h3 id="gif-制作器">&lt;strong>GIF 制作器&lt;/strong>
&lt;/h3>&lt;p>本人常用的 GIF 整活工具之一。依然是买断去广告。&lt;/p>
&lt;p>满足我 99%的整活需求，包括：正放倒放反复放，修改播放速度，剪辑（时间轴），裁剪（尺寸）&lt;/p>
&lt;p>不需要的功能：滤镜。&lt;/p>
&lt;p>缺少的功能：抽帧，逐帧选择开始和结尾，删除特定帧。&lt;/p>
&lt;h3 id="gif-toaster和gif-cracker">&lt;strong>GIF Toaster&lt;/strong>和&lt;strong>GIF Cracker&lt;/strong>
&lt;/h3>&lt;p>两个软件是同一个立本作者写的，但是覆盖的功能和操作的逻辑却不相同，并且有着调整了某些选项就无法正常导出的 bug。这份纠结也是让我舍弃之后转移到上述 GIF 制作器的原因。&lt;/p>
&lt;p>Toaster 倾向于通过视频或多张图片生成 gif，但同时也支持 gif 到其他的转换，但是这个最常用的功能却藏得最深。其他从视频转换支持帧率选定，但是如果进行了剪辑或者裁剪，则无法正常导出。导致我经常需要提前在相册里裁剪好再进行编辑，或者编辑完之后用 Cracker 进行二次编辑。&lt;/p>
&lt;p>Cracker&lt;strong>仅&lt;/strong>支持 GIF 到其他格式的处理，但是支持上述 GIF 制作器不支持的抽取或删除特定帧，以及逐帧选择范围的功能。&lt;/p>
&lt;p>两个软件我都买断去广告了，因为实在是便宜，但是作者这个软件操作的逻辑实在是不敢恭维。&lt;/p></description></item><item><title>关于使用 ImageMagick 转换 pdf tif/tiff 至 png</title><link>https://deepseaxx.com/p/20240208-imagemagick/</link><pubDate>Thu, 08 Feb 2024 14:19:00 +0900</pubDate><guid>https://deepseaxx.com/p/20240208-imagemagick/</guid><description>&lt;p>反正就是因为某个特殊原因，获得的文件都是用 pdf 或 tiff 格式，且大部分为矢量图。&lt;/p>
&lt;h2 id="为什么有这样的需求">为什么有这样的需求
&lt;/h2>&lt;p>我的需求也有很多情景，不同的需求。&lt;/p>
&lt;ul>
&lt;li>含有多页的 PDF/TIF 可以拆分成单个图片。
&lt;ul>
&lt;li>CubePDF Utility 可以实现这样的需求，但是了解后发现只能通过 UI 操作，没有很好的 CLI 支持，不适用大量转换，每次都要多次操作。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>对于不支持 tif 和 pdf 贴图（指直接复制粘贴）的 Excel，可以把整张图片直接粘贴入，并在上面添加文本框和标注。
&lt;ul>
&lt;li>PDF 原生支持标记，借助免费的 Sumatra 或者收费的 Acrobat 可以实现，但是考虑到其他协作人也要共同编辑，收费软件产生的花销原因排除，免费软件 Sumatra 平均操作两次就要无响应一次也可以排除。Excel 本身已经是很多公司付费软件的标配，大多数人也都熟悉基本操作，容易上手。&lt;/li>
&lt;li>图片上直接编辑只适用于临时使用的情况，情况有变之后需要编辑就很复杂。&lt;/li>
&lt;li>Microsoft Whiteboard 可能适合我的想法，但是暂时还没成为被微软重视的项目，总感觉会在一个半成品的停留至死，在这种兼容性很差的平台投入工作总感觉非常危险。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>从矢量图转换为位图，转换出来的文件要尽可能小。
&lt;ul>
&lt;li>首先源文件为矢量图只是因为特殊需求，且在这个特定需求下矢量图的尺寸相当之小。其实输出是不是矢量图没啥关系，我也希望输出是不怎么占用空间的矢量图格式。但矢量图本身也有各种种类。另外就是，&lt;a class="link" href="https://www.imagemagick.org/Usage/formats/#vector" target="_blank" rel="noopener"
>magick 处理矢量图本身就不被推荐&lt;/a>，推荐使用专门为了矢量图设计的工具。上文中也有其他推荐，暂时还没有了解。&lt;/li>
&lt;li>相比原图的风格，例如是否是有大片空白面积，是否黑白，是更多硬线条还是色彩丰富的风景画，jpg 和 png 的压缩方式分别适用于不同的场景，文件尺寸也有不同的表现。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="命令">命令
&lt;/h2>&lt;h3 id="tif-to-png">tif to png
&lt;/h3>&lt;p>先上我最常用的，tif 格式转换为 png 格式的指令。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">convert -density 144 -quality 100 -depth 8 -alpha remove -resize 50% input.tif out.png
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这是把 tif 转换为 png 的一个最常用的参数。&lt;/p>
&lt;ul>
&lt;li>&lt;code>-density 144&lt;/code>代表解像度。&lt;/li>
&lt;li>&lt;code>-quality 100&lt;/code>代表压缩质量，因为这种单色图片比起压缩质量，更重要的是分辨率上的尺寸压缩，quality 本身对输出的影响很小。&lt;/li>
&lt;li>&lt;code>-depth 8&lt;/code>就是我们说的 8bit 色深。&lt;/li>
&lt;li>&lt;code>-alpha remove&lt;/code>指删除所有透明层，我常用到的 tiff 格式的矢量图片是透明背景，不删除透明层直接压缩成位图会变得很奇怪。&lt;/li>
&lt;li>&lt;code>-resize 50%&lt;/code>尺寸缩放为原尺寸的 50%，因为原图一般为五位数乘四位数像素的大小，在不追求严格的场景下完全没必要，所以 50%甚至 30%都是可以的。&lt;/li>
&lt;/ul>
&lt;p>另外不知道 magick 内部是如何处理这些输入参数的，如果调换顺序，很有可能导致参数不起效果。我写的顺序姑且是保证所有参数都可以生效的。&lt;/p>
&lt;h3 id="pdf-to-png">pdf to png
&lt;/h3>&lt;p>然后是 pdf 格式转换为 png 格式。&lt;/p>
&lt;p>pdf 格式的输入就有很多种类型了，可能是 word 或 excel 文档的导出结果，有可能是海报图片等，也有可能是跟上述 tif 相同的黑白矢量图。所以一种设置无法覆盖所有情况，根据自己需求调整。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> convert -density 300 -quality 100 -depth 8 -alpha remove -resize 30% input.pdf out.png)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;code>-density 300&lt;/code>代表解像度。相比 tif 格式的输入，pdf 内含的“图片尺寸”更小，所以用更高的解像度来保证转换足够保真。&lt;/li>
&lt;li>&lt;code>-quality 100&lt;/code>同上&lt;/li>
&lt;li>&lt;code>-depth 8&lt;/code>同上&lt;/li>
&lt;li>&lt;code>-alpha remove&lt;/code>同上&lt;/li>
&lt;li>&lt;code>-resize 30%&lt;/code>尺寸缩放为原尺寸的 30%，或自己修改为 50%，或者完全不进行 resize（删掉这一部分），像前文说的，pdf 的输入有各种各样的情况，尺寸也各有区别。&lt;/li>
&lt;/ul>
&lt;p>针对 pdf 的各种情景，推荐按照自己最常用的场景分别保存为不同的 bat 文件来一键执行。下一段放一下我自己（指导 ChatGPT）写的易用的批处理文件。&lt;/p>
&lt;h2 id="批处理">批处理
&lt;/h2>&lt;p>用刚才 pdf to png 的例子来说，在我的电脑里有这样一个结构的 convert（任意名）文件夹，内部保存了 pdf2png.bat（任意名）的批处理文件，该阶层下有 src 和 out 两个文件夹，（与 bat 内的 INPUT_DIR 和 OUTPUT_DIR 保持一致），src 存放输入文件，out 为输出位置。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">convert/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ pdf2png.bat
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├─src/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ example.pdf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">└─out/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> example.png
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后这是 pdf2png.bat 的内容。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">set INPUT_DIR=src
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">set OUTPUT_DIR=out
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">set INPUT_FORMAT=pdf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">set OUTPUT_FORMAT=png
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">for /r &amp;#34;%INPUT_DIR%&amp;#34; %%i in (*.%INPUT_FORMAT%) do (
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> convert -density 300 -quality 100 -depth 8 -alpha remove -resize 30%% &amp;#34;%%i&amp;#34; &amp;#34;%OUTPUT_DIR%\%%~ni.%OUTPUT_FORMAT%&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>首先我没有使用&lt;code>@echo off&lt;/code>，是因为部分情况下处理过程较慢，我希望试试看见现在的进度在哪，并知道他不是卡住了。&lt;/p>
&lt;p>开头的四行&lt;code>set 变量名=目录名&lt;/code>，谜底就在谜面上，分别对应了输入文件夹，输出文件夹，输入格式和输出格式。这样不用仔细去阅读命令内容就可以一眼看到这个 bat 文件大概的目的。&lt;/p>
&lt;p>然后对输入文件夹内，后缀名为输入格式的文件进行循环。&lt;/p>
&lt;p>循环的指令，便是对每一个指定的输入文件夹内的文件，输出对应格式的文件。除后缀外的其他部分与输入文件名相同。&lt;/p>
&lt;p>同样的，复制内容，修改后缀名的变量，就可以分别为各种需求保存不同的 bat 文件了。你也可以修改 bat 文件名为对应的需求，比如&lt;code>pdf2png.bat&lt;/code>和&lt;code>pdf2png_hq.bat&lt;/code>就对应了压缩和不压缩图片尺寸的两种情况。当然这种做法有点蠢且粗暴，但我觉得还挺直观。&lt;/p></description></item></channel></rss>